<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.coffeereview.mapper.UserMapper">

<!--

하나의 UserVO 인스턴스는 내부적으로 여러 개의 AuthVO를 가지는데, 이를 흔히 1+N관계라고 합니다.
MyBatis의 ResultMap을 이용하면 하나의 쿼리로 UserVO와 내부의 AuthVO의 리스트까지 함께 처리할 수 있습니다.

 -->

<resultMap type="com.coffeereview.domain.MemberVO" id="userMap">
	<id property="uid" column="uid"/>
	<result property="password" column="password"/>
	<result property="name" column="name"/>
	<result property="nickname" column="nickname"/>
	<result property="phonenum" column="phonenum"/>
	<result property="email" column="email"/>
	<collection property="authList" resultMap="authMap"></collection>
</resultMap>

<resultMap type="com.coffeereview.domain.AuthVO" id="authMap">
	<result property="uid" column="uid"/>
	<result property="auth" column="auth"/>
</resultMap>

<insert id="insert" >
	insert into tbl_users (uid, password, name, nickname, phonenum, email)
	values (#{uid}, #{password}, #{name}, #{nickname}, #{phonenum}, #{email})
</insert>

<select id="read" resultMap="userMap">
	select
		user.uid, password, name, nickname, phonenum, email, regdate, auth
	from
		tbl_users user
	left outer join
		tbl_users_auth auth
	on
		user.uid = auth.uid
	where user.uid = #{uid}
</select>

<delete id="delete" >
	delete from tbl_users where uid = #{uid}
</delete>

<update id="update">
	update tbl_users
	name = #{name},
	password = #{password},
	nickname = #{nickname},
	phonenum = #{phonenum},
	email = #{email}
	where uid = #{uid}

</update>

<select id="find" resultType="boolean">
	select if(count(*) != 0, 1, 0) <!-- uid를 갖는 tuple이 존재하면 1, 아니면 0 반환 -->
	from tbl_users
	where uid = #{uid}
</select>

<!-- uid로 nickname 가져오는 mapper 만들기 -->
<select id="findByNickname" resultType="String">
	select nickname <!-- uid를 갖는 tuple이 존재하면 1, 아니면 0 반환 -->
	from tbl_users
	where uid = #{uid}
</select>


</mapper>